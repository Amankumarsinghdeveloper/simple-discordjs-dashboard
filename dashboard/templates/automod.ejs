<%- include("partials/header", { bot, user, path, title: `Automod AI | ${guild.name}`, activeItem: 'automod-ai', guildID: guild.id }) %>


<style>

  @media (min-width: 991.98px) {
  main {
    padding-left: 240px;
  }
}

  .round-button {
  display: inline-block;
  padding: 8px 20px; /* Adjust the padding for a longer button */
  border: none;
  border-radius: 10px; /* Rounded corner squares */
  background-color: #555; /* Dark gray background color */
  color: #fff;
  font-size: 16px;
  text-align: center;
  cursor: pointer;
  transition: box-shadow 0.3s ease, color 0.3s ease; /* Add color transition */
  margin-bottom: 10px;
}

/* Glow shadow on hover and change text color to black */
.round-button:hover {
  box-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff;
  color: #fff; /* Change text color to black */
}
  
  /* Custom CSS for the shadow effect */
  .custom-card {
    border: 1px solid rgba(0, 0, 0, 0.125);
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    transition: all 0.3s ease;
  }

      .container-sm.center {
    margin-left: 250px; /* Adjust this value to match the width of your sidebar */
  margin-top: 90px;
  }

/* phone*/
  @media (max-width: 767px) {
    .container-sm.center {
      margin-left: 0;
      margin-top: 130px;
    }
  }
    body.theme-light .custom-card {
    background-color: #fff;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
  }

  body.theme-dark .custom-card {
    background-color: #343a40;
    box-shadow: 0 0.125rem 0.25rem rgba(255, 255, 255, 0.075);
  }

  body.theme-light .custom-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  }

  body.theme-dark .custom-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(255, 255, 255, 0.15);
  }

  /* Custom CSS for the shadow effect on hover */
  .custom-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  }

  


   .popup-message {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 20px; /* Increase the padding to make it bigger */
    background-color: #f5f5f5; /* Default slightly darker background color */
    border: 1px solid #ccc; /* Lighter border color */
    border-radius: 8px; /* Rounded border */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    display: none;
    /* Adjust the width here */
    width: 70%;
    text-align: left;
    font-size: 18px; /* Increase the font size to make the text bigger */
    z-index: 999; /* Set a higher z-index to ensure it's displayed above other content */
  }

  /* Style for the popup message with bg-dark class */
  .popup-message.bg-dark {
    background-color: #333; /* Darker background color for bg-dark */
    border-color: #666; /* Darker border color for bg-dark */
  }

  /* Style for the right-aligned buttons */
  .popup-message .d-flex {
    justify-content: space-between;
  }

  /* Style for vertically centering the text */
  .popup-message .d-flex div {
    display: flex;
    align-items: center;
  }

  /* Add margin to the right of the "Cancel" button */
  .popup-message .btn-danger {
    margin-right: 10px; /* Adjust the margin value as needed */
  }

  /* Media query for smaller window resolutions */
  @media (max-width: 991px) {
    .popup-message {
      left: 0; /* Adjust the left position for smaller screens */
      transform: none; /* Reset the transform */
      width: 100%; /* Adjust the width to full width for smaller screens */
    }
  }
</style>

<div class="container-sm center" >
  
  <div class="row">
    <div class="col-md-6">
      <% if (alert) { %>
        <div class="alert alert-success" role="alert">
          <%= alert %>
        </div>
      <% } %>
              <h1 class="mb-4">Automod AI</h1>
      <hr>
        <br/>
        <form method="POST">
      <div class="card mb-4 custom-card" style="background-color: #121927; color: #fff;">
        
        <div class="card-body">
          <h5 class="card-title">Automod AI</h5>
          <p class="card-text" style="font-style: italic; ">Set the rules for your Automod AI for it to keep the eye on rule breakers.</p>


          <div class="mb-4 input-field" style="display: flex; align-items: center;">
  <div style="margin-right: 10px; font-weight: bold; width: 32px; text-align: center;">1.</div>
  <input type="text" class="form-control" name="rule_1" id="rule1" value="<%= settings.rules_1 || '' %>" placeholder="Enter Rule 1" style="background-color: #0d1422; color: #FFFFFF">
</div>
<div id="ruleContainer">
  <%
      const premiumLevel = settings.premium; // Get the premium level from the settings
  const maxRules = (premiumLevel == 0) ? 3 : (premiumLevel == 1) ? 10 : 15;
            let displayedRuleCount = 0;
    
for (let ruleNumber = 2; ruleNumber <= maxRules; ruleNumber++) {
    
    const ruleValue = settings['rules_' + ruleNumber] || ''; // Get the rule value from settings

    // Only display the input field if the rule value is not blank
    if (ruleValue.trim() !== '') {
    displayedRuleCount++;
  %>
  <div class="mb-4 input-field" style="display: flex; align-items: center;">
    <div style="margin-right: 10px; font-weight: bold; width: 32px; text-align: center;"><%= ruleNumber %>.</div>
    <input type="text" class="form-control" name="rule_<%= ruleNumber %>" id="rule<%= ruleNumber %>" value="<%= ruleValue %>" placeholder="Enter Rule <%= ruleNumber %>" style="background-color: #0d1422; color: #FFFFFF">
  </div>
  <%
    }
  }
  %>
</div>


          <div style="display: flex; justify-content: center;">
  <button type="button" class="<%= displayedRuleCount < maxRules ? 'round-button' : 'small-round-button' %>" id="addRuleButton" <%= displayedRuleCount >= maxRules ? 'disabled' : '' %>>
    <%= displayedRuleCount < maxRules ? '+' : 'Limit Reached' %>
  </button>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const ruleContainer = document.getElementById("ruleContainer");
  const addRuleButton = document.getElementById("addRuleButton");
  let ruleNumber = document.querySelectorAll("[name^='rule_']").length + 1;
  const existingInputField = document.getElementById("rule1");
  const existingInputClassList = existingInputField.classList;

  // ...
// ...
// ...
addRuleButton.addEventListener("click", function() {

  let maxRules = 3; // Default value

  if (premiumLevel == "1") maxRules = 10;
  else if (premiumLevel == "2") maxRules = 15;

  if (ruleNumber <= maxRules) {

    const newInputDiv = document.createElement("div");
    newInputDiv.className = "mb-4 input-field"; // Apply only the 'form-control' class
    newInputDiv.style.display = "flex";
    newInputDiv.style.alignItems = "center";

    // Clone the style of the first textbox
    const firstTextbox = document.getElementById("rule1");
    const backgroundColor = window.getComputedStyle(firstTextbox).backgroundColor;
    const textColor = firstTextbox.style.color;

    newInputDiv.innerHTML = `
      <div style="margin-right: 10px; font-weight: bold; width: 32px; text-align: center; color: ${textColor};">${ruleNumber}.</div>
      <input type="text" class="${Array.from(existingInputClassList).join(" ")} form-control" name="rule_${ruleNumber}" id="rule${ruleNumber}" placeholder="Enter Rule ${ruleNumber}" style="background-color: ${backgroundColor}; color: ${textColor};">
    `;

    ruleContainer.appendChild(newInputDiv);
    listenForChanges();

    ruleNumber++;

    // ...
  } else {
    // make it put this meowish thing abt reached limit
    addRuleButton.classList.remove("btn-primary");
    addRuleButton.classList.add("btn-danger");
    addRuleButton.textContent = "Limit Reached";
    addRuleButton.disabled = true;
  }
});
// ...

// ...

});
</script>
  <div class="mt-4 text-center">
    <button id="saveButton" type="submit" class="btn btn-secondary text-white" style="display: none;">Save Settings</button>
  </div>
</div>

<!-- Popup message for changes -->
<div class="popup-message" id="popupMessage" style="background-color: #0d1422; color: #FFFFFF;">
  <div class="d-flex justify-content-between align-items-center">
    <div>
      Changes detected! Please save or cancel.
    </div>
    <div>
      <button class="btn btn-danger text-white" onclick="cancelChanges()">Cancel</button>
      <button class="btn btn-success text-white" type="submit" onclick="saveChanges()">Save</button>
    </div>
  </div>
</div>

 </form>
<%- include("partials/footer") %>

<script>
  const premiumLevel = `<%= settings.premium %>`; 


  let changesDetected = false;

    function listenForChanges() {
  const inputFields = document.querySelectorAll('[name^="rule_"]');
      inputFields.forEach((input) => {
        input.addEventListener('input', () => {
          if (input.value !== input.dataset.originalValue) {
            showPopup();
            changesDetected = true;
          } else {
            hidePopup();
            changesDetected = false;
          }
        });
        // Store the original values as data attributes for comparison
        input.dataset.originalValue = input.value;
      });
    }


    // Call the listenForChanges function to start listening for changes
    listenForChanges();



  function showPopup() {
    document.getElementById('popupMessage').style.display = 'block';
    document.getElementById('saveButton').style.display = 'none';
  }

  function hidePopup() {
    document.getElementById('popupMessage').style.display = 'none';
    document.getElementById('saveButton').style.display = 'none';
  }

  function saveChanges() {
    // Your save changes logic here
    // You can submit the form or perform any other actions
    hidePopup();
  }

  function cancelChanges() {
    // Your cancel changes logic here
    // You can reset the form or perform any other actions
  //  document.querySelector('textarea[name="trainData"]').value = originalTrainData;
 //   document.querySelector('input[name="talkingStyle"]').value = originalTalkingStyle;
    hidePopup();
  }
</script>
