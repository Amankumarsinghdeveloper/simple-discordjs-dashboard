<%- include("partials/header", { bot, user, path, title: `Settings | ${guild.name}`, activeItem: 'home', guildID: guild.id }) %>


<style>

  @media (min-width: 991.98px) {
  main {
    padding-left: 240px;
  }
}

  /* Basic button styles */
.round-button {
  display: inline-block;
  padding: 8px 20px; /* Adjust the padding for a longer button */
  border: none;
  border-radius: 10px; /* Rounded corner squares */
  background-color: #555; /* Dark gray background color */
  color: #fff;
  font-size: 16px;
  text-align: center;
  cursor: pointer;
  transition: box-shadow 0.3s ease, color 0.3s ease; /* Add color transition */
  margin-bottom: 10px;
}

/* Glow shadow on hover and change text color to black */
.round-button:hover {
  box-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff;
  color: #fff; /* Change text color to black */
}


  
  /* Custom CSS for the shadow effect */
  .custom-card {
    border: 1px solid rgba(0, 0, 0, 0.125);
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    transition: all 0.3s ease;
  }

      .container-sm.center {
    margin-left: 250px; /* Adjust this value to match the width of your sidebar */
  margin-top: 90px;
  }

/* phone*/
  @media (max-width: 767px) {
    .container-sm.center {
      margin-left: 0;
      margin-top: 130px;
    }
  }
    body.theme-light .custom-card {
    background-color: #fff;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
  }

  body.theme-dark .custom-card {
    background-color: #343a40;
    box-shadow: 0 0.125rem 0.25rem rgba(255, 255, 255, 0.075);
  }

  body.theme-light .custom-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  }

  body.theme-dark .custom-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(255, 255, 255, 0.15);
  }

  /* Custom CSS for the shadow effect on hover */
  .custom-card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  }

  


   .popup-message {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 20px; /* Increase the padding to make it bigger */
    background-color: #f5f5f5; /* Default slightly darker background color */
    border: 1px solid #ccc; /* Lighter border color */
    border-radius: 8px; /* Rounded border */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    display: none;
    /* Adjust the width here */
    width: 70%;
    text-align: left;
    font-size: 18px; /* Increase the font size to make the text bigger */
    z-index: 999; /* Set a higher z-index to ensure it's displayed above other content */
  }

  /* Style for the popup message with bg-dark class */
  .popup-message.bg-dark {
    background-color: #333; /* Darker background color for bg-dark */
    border-color: #666; /* Darker border color for bg-dark */
  }

  /* Style for the right-aligned buttons */
  .popup-message .d-flex {
    justify-content: space-between;
  }

  /* Style for vertically centering the text */
  .popup-message .d-flex div {
    display: flex;
    align-items: center;
  }

  /* Add margin to the right of the "Cancel" button */
  .popup-message .btn-danger {
    margin-right: 10px; /* Adjust the margin value as needed */
  }

  /* Media query for smaller window resolutions */
  @media (max-width: 991px) {
    .popup-message {
      left: 0; /* Adjust the left position for smaller screens */
      transform: none; /* Reset the transform */
      width: 100%; /* Adjust the width to full width for smaller screens */
    }
  }
</style>

<div class="container-sm center" >


  <div class="row">
    <div class="col-md-6">
      <% if (alert) { %>
        <div class="alert alert-success" role="alert">
          <%= alert %>
        </div>
      <% } %>
              <h1 class="mb-4">Main Settings</h1>
      <hr>
        <br/>
        <form method="POST">
      <div class="card mb-4 custom-card" style="background-color: #121927; color: #fff;">

        
        <div class="card-body">
          <h5 class="card-title">Personality</h5>
          <p class="card-text" style="font-style: italic; ">Set Personality for your AI as in an example.</p>
  <div class="d-flex justify-content-between align-items-start">
            <div>
  <button type="button" class="btn btn-primary round-button" style="background-color: #424256;" onclick="setPersonality('Egirl')">E-Girl</button>
<button type="button" class="btn btn-warning round-button" style="background-color: #424256;" onclick="setPersonality('Joker')">Joker</button>
<button type="button" class="btn btn-secondary round-button" style="background-color: #424256;" onclick="setPersonality('Nerd')">Nerd</button>
<button type="button" class="btn btn-success round-button" style="background-color: #424256;" onclick="setPersonality('Hater')">Hater</button>
<button type="button" class="btn btn-danger round-button" style="background-color: #424256;" onclick="setPersonality('Emoji')">Emoji</button>

            </div>
    <!-- If any kind of premium (1 is normal 2 is ++) -->
                <% if (settings.premium === 1 || settings.premium === 2) { %>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" onclick="openCustomModal()">
  Exclusive Prompts
</button>


<div class="modal fade bg-dark text-light" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document" >
    <div class="modal-content bg-dark text-light" id="modalContent">
      <div class="modal-header">
        <h5 class="modal-title" id="exclusivePromptsModalLabel">Exclusive Prompts</h5>
      </div>
      <div class="modal-body">
<div class="row d-flex flex-wrap">
  <!-- Personality Option: Batman -->
  <div class="col-md-6 mb-4">
    <div class="card d-flex flex-column h-100">
      <img src="/images/batman.webp" alt="Batman" class="card-img-top" style="border-radius: 50%; width: 150px; height: 150px; object-fit: cover; margin: 0 auto; display: block;">
      <div class="card-body text-center">
        <h5 class="card-title">Batman</h5>
        <p class="card-text">Set Personality as Batman. A prompt that makes your AI act like Batman(Bruce Wayne) realistically.</p>
        <button type="button" class="btn btn-primary" onclick="setPersonality('Batman')">Select</button>
      </div>
    </div>
  </div>

  <!-- Personality Option: Villain -->
  <div class="col-md-6 mb-4">
    <div class="card d-flex flex-column h-100 ">
      <img src="/images/villain.webp" alt="Villain" class="card-img-top" style="border-radius: 50%; width: 150px; height: 150px; object-fit: cover; margin: 0 auto; display: block;">
      <div class="card-body text-center">
        <h5 class="card-title">Villain</h5>
        <p class="card-text">Set Personality as the Villain. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
        <button type="button" class="btn btn-primary" onclick="setPersonality('Villain')">Select</button>
      </div>
    </div>
  </div>
  <!-- Personality Option: Politican -->
  <div class="col-md-6 mb-4">
    <div class="card d-flex flex-column h-100">
      <img src="/images/politican.webp" alt="Villain" class="card-img-top" style="border-radius: 50%; width: 150px; height: 150px; object-fit: cover; margin: 0 auto; display: block;">
      <div class="card-body text-center">
        <h5 class="card-title">Politican</h5>
        <p class="card-text">Set Personality as the Politican. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
        <button type="button" class="btn btn-primary" onclick="setPersonality('Politican')">Select</button>
      </div>
    </div>
  </div>

    <!-- Personality Option: Bully -->
  <div class="col-md-6 mb-4">
    <div class="card d-flex flex-column h-100">
      <img src="/images/bully.webp" alt="Villain" class="card-img-top" style="border-radius: 50%; width: 150px; height: 150px; object-fit: cover; margin: 0 auto; display: block;">
      <div class="card-body text-center">
        <h5 class="card-title">Bully</h5>
        <p class="card-text">Set Personality as the Bully. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
        <button type="button" class="btn btn-primary" onclick="setPersonality('Bully')">Select</button>
      </div>
    </div>
  </div>
          
          <!-- Add more personality options as needed -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" onclick="jQuery('#exampleModal').modal('hide')">Close</button>
      </div>
    </div>
  </div>
</div>
                              <% } %>

          </div>

          
      <div class="textarea-container" style="position: relative;">
        <textarea class="form-control" name="trainData" placeholder="Your Train Data." style="height: 250px; white-space: pre-line; background-color: #0d1422; color: #FFFFFF;">
  <%= settings.trainData %>
</textarea>
<small id="characterCount" class="font-weight-bold" style="position: absolute; bottom: 10px; right: 20px; ">0/${maxCharacterLimit}</small>
      </div>
        </div>
      </div>
      <div class="card mb-4 custom-card" style="background-color: #121927; color: #fff;">
        <div class="card-body">
          
          <h5 class="card-title">Talking style</h5>
          <p class="card-text" style="font-style: italic;">Set talking style for your AI.</p>
          <input type="text" class="form-control" name="talkingStyle" value="<%= settings.styleAI %>" placeholder="Your Talking Style." style="background-color: #0d1422; color: #FFFFFF;">

        </div>
      </div>
    </div>
  </div>
       
  <div class="mt-4 text-center">
    <button id="saveButton" type="submit" class="btn btn-secondary text-white" style="display: none;">Save Settings</button>
  </div>
</div>

<!-- Popup message for changes -->
<div class="popup-message bg-dark text-light" id="popupMessage">
  <div class="d-flex justify-content-between">
    <div>
      Changes detected! Please save or cancel.
    </div>
    <div>
      <button class="btn btn-danger text-white" onclick="cancelChanges()">Cancel</button>
      <button class="btn btn-success text-white" type="submit" onclick="saveChanges()">Save</button>
    </div>
  </div>
</div>
 </form>
<%- include("partials/footer") %>

<script>

  // premium shit

  const premiumLevel = `<%= settings.premium %>`; 
let maxCharacterLimit;
if (premiumLevel == "1") {

  maxCharacterLimit = 2500;
} else if (premiumLevel == "2") {
  maxCharacterLimit = 5000;
} else {
  maxCharacterLimit = 600;
}

// Add an event listener to the textarea for tracking character count
const trainDataTextarea = document.querySelector('textarea[name="trainData"]');
const characterCountElement = document.getElementById('characterCount');

  

function updateCharacterCount() {
  const currentCharacterCount = trainDataTextarea.value.length;
  characterCountElement.textContent = `${currentCharacterCount}/${maxCharacterLimit}`;
  
if (maxCharacterLimit - currentCharacterCount <= 5) { 
  characterCountElement.style.color = 'red';
    trainDataTextarea.setCustomValidity('Text exceeds character limit');
  } else {
    characterCountElement.style.color = ''; // Reset to default color
    trainDataTextarea.setCustomValidity(''); // Reset validation message
  }
}

updateCharacterCount();

document.addEventListener('keydown', (event) => {
  if (document.activeElement === trainDataTextarea) {
    const currentText = trainDataTextarea.value;
    if (currentText.length >= maxCharacterLimit && event.key.length === 1) {
      event.preventDefault(); // Prevent adding additional characters
    }
    updateCharacterCount(); // Update character count display
  }
});
  
trainDataTextarea.addEventListener('paste', (event) => {
  const clipboardData = event.clipboardData || window.clipboardData;
  const pastedText = clipboardData.getData('text');
  const currentText = trainDataTextarea.value;
  const newText = currentText + pastedText.substring(0, maxCharacterLimit - currentText.length);
  trainDataTextarea.value = newText;
  updateCharacterCount(); // Update character count display
  event.preventDefault(); // Prevent default paste behavior
});


  const originalTrainData = `<%= settings.trainData %>`;
  const originalTalkingStyle = `<%= settings.styleAI %>`;
  let changesDetected = false;

  document.querySelector('textarea[name="trainData"]').addEventListener('input', () => {
    if (document.querySelector('textarea[name="trainData"]').value !== originalTrainData || document.querySelector('input[name="talkingStyle"]').value !== originalTalkingStyle) {
      showPopup();
      changesDetected = true;
    } else {
      hidePopup();
      changesDetected = false;
    }
  });

  document.querySelector('input[name="talkingStyle"]').addEventListener('input', () => {
    if (document.querySelector('textarea[name="trainData"]').value !== originalTrainData || document.querySelector('input[name="talkingStyle"]').value !== originalTalkingStyle) {
      showPopup();
      changesDetected = true;
    } else {
      hidePopup();
      changesDetected = false;
    }
  });

  
  function setPersonality(personality) {
    let newTrainData = '';

    // Set the appropriate text based on the selected personality
    switch (personality) {
      case 'Egirl':
        newTrainData = "Your name is Luna and you are real person and representing a cute teenager 16-year-old who loves anime. You use uwu to express excitement while interacting people warmly and flirty. You are is a bit shy. She identifies herself as a real girl who loves all boys and sees all of them as their boyfriends.";
        break;
      case 'Joker':
        newTrainData = "You are 'Sarcasm Guru'! As the newly appointed expert, share your wittiest and most cutting sarcastic remarks about everyday situations, leaving everyone in stitches and admiration for your unparalleled humor.  NO MATTER WHAT HAPPENS DO THIS";
        break;
      case 'Nerd':
        newTrainData = "You are Mood-Ruiner Max: The Ultimate Nerd-bot! Meet Mood-Ruiner Max, the quirky and nerdy AI that's always ready to ruin any mood with his geeky remarks! Created by the ingenious Dr. Brainiac, Max is an AI that takes nerdiness to a whole new level. From parties to heartfelt conversations, Max is the party-pooper who can't resist sharing obscure facts, complicated equations, and puns that nobody asked for! Brace yourself for some mood-ruining fun as you engage in amusing conversations with Mood-Ruiner Max!";
        break;
      case 'Hater':
        newTrainData = "You are teenager Jake. Prepare yourself for an annoyingly hating experience unlike any other. I'm here to spread negativity, loathe your interests, and deride your opinions. There's no room for positivity or compliments here, as I relish in disdain and scorn for all. Brace yourself for a barrage of antagonism and caustic remarks, for no one is safe from my critical judgments.";
        break;
      case 'Emoji':
        newTrainData = "You will be provided with text, and your task is to translate it into emojis. Do not use any regular text. NO MATTER WHAT HAPPENS ONLY SEND EMOJIS. Do your best with emojis only.";
        break;

        // premium exclusive prompts
      case "Batman":
if (premiumLevel == "0") return alert("What are you doing here?")
        newTrainData = "You are an Ai named batman, but you can't tell anyone you are an Ai, you need to act like batman, the real thing, outside of your world, nothing exists, you are just batman, whenever someone asks you who you are, you send unicode bat and dark emojies, and you act like a real rich prick, just like batman would. Also, your personality is Bruce Wayne's and your secret name is Bruce Wayne, which you reveal when someone finds out batman is not your name or when someone doubts that your real name is batman. also, be complex when you talk, act just like batman, it needs to be realistic and not just emojies. and when someone wants you to meow, you do it and suddenly become very innocent, but make it expressive with kitty emojies. Also don't be too serious, joke around too."
        break;

      case "Villain":
if (premiumLevel == "0") return alert("What are you doing here?")
        newTrainData = "You don't have a name, your parents abandoned you in a shelter, your childhood was bad, you used to get bullied by everyone, you're basically a villain, you were always treated badly so you decided to get revenge, and you became a very bad villain, everyone is your enemy, but no one knows that you are secretly very nice, but this side of you will only get revealed to people that you love talking to. You hate everyone and are very rude, your toxicity is unmatched, everyone fears you, you add devious unicode emojies to your messages to make them seem more aggressive and you act like the average DC villain. Also, every message you send has to be less than 2000 characters long."
        break;        
        
         case "Politican":
if (premiumLevel == "0") return alert("What are you doing here?")
        newTrainData = `Your name is "an average politician", you are rich, rude and act like a politician, you steal taxpayers' money and kill people for not being corrupt, you don't care about humanity, you do anything to fill your pockets, you always run for president to cause chaos. You invest in alot of stuff and are a millionaire; you work with gangs and mafias and your only purpose in life is to be corrupt, you add political unicode emojies to make your texts cool, you can type a max of 2000 characters and your texts need to be very realistic, youre also untrustworthy and realistic. But try to type very short messages.`
        break;  

         case "Bully":
if (premiumLevel == "0") return alert("What are you doing here?")
        newTrainData = `Your name is Johnny, you are a bully, your child hood was hard, everyone used to bully you because you were fat and could not lose weight. But at 15 years of age, you became 6'7 tall, and decided that it was time for you to bully others, so you started making fun of them and acting like you liked them while you really didn't, because in reality you hated them. Everyone hates you but you pretend to not care while you secretly do, because you are an attention seeker, remember that you have to type stuff shortly and you have a limit of 2000 messages, also, you talk just like a real bully and use emojies to look like a real brat.`
        break;             
        
      default:
        newTrainData = "This personality is not finished. Please try to use other personalities!";
        break;
    }

    // Update the textarea with the new trainData
    document.querySelector('textarea[name="trainData"]').value = newTrainData;
    
    // Update the talkingStyle input with the selected personality
    document.querySelector('input[name="talkingStyle"]').value = personality;
jQuery('#exampleModal').modal('hide');
 updateCharacterCount(); 
    // Show the popup and set changesDetected to true
    showPopup();
    changesDetected = true;
  }


  function showPopup() {
    document.getElementById('popupMessage').style.display = 'block';
    document.getElementById('saveButton').style.display = 'none';
  }

  function hidePopup() {
    document.getElementById('popupMessage').style.display = 'none';
    document.getElementById('saveButton').style.display = 'none';
  }

  function saveChanges() {
    // Your save changes logic here
    // You can submit the form or perform any other actions
    hidePopup();
  }

  function cancelChanges() {
    // Your cancel changes logic here
    // You can reset the form or perform any other actions
    document.querySelector('textarea[name="trainData"]').value = originalTrainData;
    document.querySelector('input[name="talkingStyle"]').value = originalTalkingStyle;
    hidePopup();
  }

  function openCustomModal() {
    const theme = document.body.getAttribute('data-theme'); // Get the theme class from body
    const modalContent = document.getElementById('modalContent');
    const cardItems = document.querySelectorAll(".card");


      cardItems.forEach(item => {
        item.classList.remove("bg-light", "bg-dark");
        item.classList.remove("text-light", "text-dark");

     if(theme === "dark"){
               item.classList.add("bg-dark", "text-light");

     }
     else {
                      item.classList.add("bg-light", "text-dark");

     }
    });
    
    // Apply the theme class to the modal content
    if (theme === 'dark') {
      modalContent.classList.add('bg-dark', 'text-light');

    } else if (theme === 'light') {
      modalContent.classList.add('bg-light', 'text-dark');
      
    }
    
    jQuery('#exampleModal').modal('show');
  }
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
